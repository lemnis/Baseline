// Base
/// The grid is defined in a single map variable,
/// with four initial properties:
/// `font-size`, `row-height`.
/// Anything you put in the root `$base` variable map
/// will be treated as a global project default.
/// You can create similar configuration maps
/// under different variable names,
/// to override the defaults as-needed.
///
/// @group Settings
/// @type Map
///
/// @link
///   https://codepen.io/mirisuzanne/pen/EgmJJp?editors=1100
///   Spread examples on CodePen
///
/// @prop {Number} font-size         Font-size of the root element
/// @prop {Number} row-height        Height of each row, generaly 1/2 of the font-size
/// @prop {Number} min-line-height   Minimum line-height
/// @prop {Number} cap-height
/// Cap-height of the used font.
/// Can be looked up at resource https://jamonserrano.github.io/plumber-sass/baserows/
///
/// @example scss - default values
/// $base: (
///   font-size: 1rem,
///   row-height: .5
/// );
///
/// @example scss - Segoe UI
/// $base: (
///   font-size: 1rem,
///   row-height: .5,
///   cap-height: 0.86
/// );
$base: () !default;

// Base defaults
/// Configuration map of Base defaults.
/// Do **not** override this, use `$base` to set the project defaults
///
/// @access private
/// @group Settings
/// @type Map
///
/// @prop {Number} font-size         [1rem]
/// @prop {Number} row-height        [.5]
/// @prop {Number} min-line-height   [1.2]
$_base-settings-defaults: (
  font-size: 1rem,
  row-height: .5,
  min-line-height: 1.2
);

// Base Settings
/// Return a combined map of Base settings,
/// based on `$_base-settings-defaults`, `$base` and
/// any local map passed into a funciton.
///
/// @group Settings
///
/// @param {maps} $overridesâ€¦
/// Optional map override of global configuration settings.
/// See `$base` above for properties.
///
/// @return {map}
/// Combined map of Base configuration settings,
/// in order of specificity:
/// any `$overrides...`,
/// then `$base` project settings,
/// and finally the `$_base-settings-defaults`
@function _base-settings($overrides...) {
    $settings: map-merge($_base-settings-defaults, $base);

    @each $config in $overrides {
        $settings: map-merge($settings, $config);
    }

	@if not map-has-key($settings, "cap-height"){
        @return _base-error("There is no cap-height set", "_base-settings");
    }

    @return $settings;
}

// Get Setting
/// Return the current value of any Base setting
///
/// @group Settings
///
/// @param {string} $key - Setting to retrieve from the configuration.
///
/// @return {*}
/// Value mapped to `$key` in the configuration maps, in order of specificity:
/// passed $map, `$base` and then `$_base-settings-defaults`
@function _base-settings-get($key, $map: $base) {
    $settings: _base-settings($map);

	// error occured
	@if type-of($settings) == "string" {
		@return $settings;
	}

    @if not map-has-key($settings, $key) {
		@return _base-error("There is no Base setting called `#{$key}`", "_base-settings-get");
    }

    @return map-get($settings, $key);
}
