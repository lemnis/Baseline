////
///  @group Math
////

//* Base math row height
/// Calculates and returns a CSS-ready row height,
/// based on normalized span and context data â€“
/// a low-level version of `susy-span`,
/// with all of the logic and none of the syntax sugar.
///
/// @param {number} $rows 			Number of rows to span
/// @param {number} $root-font-size	Base font-size
/// @param {number} $row-height 	Height of the row
///
/// @return {number} 				Height of `x` rows on the grid
@function _base-math-row-height(
	$rows,
	$row-height,
	$root-font-size
){
	@return $rows * $row-height * $root-font-size;
}

//* Base math rows
/// Calculates and returns amount of rows needed for given font-size
///
/// @param {number} $font-size 			Font-size to calculate on
/// @param {number} $add-line-height 	Extra rows to span for each text row
/// @param {number} $root-font-size 	Base font-size
/// @param {number} $row-height		Row height
/// @param {number} $min-line-height	Minimum line-height to use
///
/// @return {number} 					Rows needed to fit defined settings
@function _base-math-rows(
	$font-size,
	$add-rows-to-line-height,
	$root-font-size,
	$row-height,
	$min-line-height
){
	$row-height: _base-math-row-height(1, $root-font-size, $row-height);

	// calculate minimum amount of rows given by the font-size
	// -> the desired font-size divided by set row height rounded upwards
	$rows-font-size: ceil(($font-size + .00001) / $row-height);
	$total-rows: $rows-font-size + $add-rows-to-line-height;

	// calculate minimum amount of rows given by the minimum line-height
	$rows-line-height: ceil(($min-line-height * $font-size / $root-font-size));

	@return if($rows-font-size < $rows-line-height, $rows-line-height, $rows-font-size);
}

//* Base math shoulder top
/// Calculates the top offset needed to set the font on the baseline
///
/// @param {number} $font-size 		Font-size to calculate on
/// @param {number} $line-height 	Line-height used
/// @param {number} $cap-height	Cap-height of used font
///
/// @return {number} 				Top shoulder height
@function _base-math-shoulder-top(
	$font-size,
	$line-height,
	$cap-height
){
	@return .5 * ($line-height - $cap-height) * $font-size;
}

//* Base math shoulder bottom
/// Calculates the bottom offset needed to keep the height in perfect rows
///
/// @param {number} $font-size 		Font-size to calculate on
/// @param {number} $line-height 	Line-height used
/// @param {number} $root-font-size 	Base font-size
/// @param {number} $row-height	Row height
/// @param {number} $cap-height	Cap-height of used font
///
/// @return {number} 				Bottom shoulder height
@function _base-math-shoulder-bottom(
	$font-size,
	$line-height,
	$root-font-size,
	$row-height,
	$cap-height
){
	@if not _base-valid-unit($font-size, $root-font-size) {
		@return _base-error(
			"Can't calculate rhythm with 2 different units, " +
			unit($font-size) + "*" unit($root-font-size),
			"_base-math-shoulder-bottom"
		);
	}
	$row-height: _base-math-row-height(1, $root-font-size, $row-height);
	$shoulder-height: _base-math-shoulder-top($font-size, $line-height, $cap-height);

	// Height in use, 1 row of text + top shoulder
	$used-height: $line-height * $font-size + $shoulder-height;
	// Row height minus the used height that overlaps less than 1 row (remainder)
	$remainder: ($used-height % $row-height);
	// if nothing is remaining remove the full row
	$height-to-remove: if($remainder == 0, $row-height, $remainder);

	@return $row-height - $height-to-remove;
}

//* Base math line-height
/// Calculates and returns the line-height with set font-size and given rows
///
/// @param {number} $rows 			Amount of rows used
/// @param {number} $font-size 		Font-size used
/// @param {number} $root-font-size 	Base font-size
/// @param {number} $row-height	Row height
///
/// @return {number} 				Unitless line-height
@function _base-math-line-height(
	$rows,
	$font-size,
	$root-font-size,
	$row-height
){
	@return _base-math-row-height($rows, $row-height, $root-font-size) / $font-size;
}