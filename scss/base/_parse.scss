// Base Parse
/// Converts the shorthand to the complete element map
///
/// @access private
/// @group Helpers
/// @todo add support for vertical-align
///
/// @param {list} $shorthand
/// Shorthand expression to define the font-size, containing:
/// - font-size (default: font-size set in settings)
/// - increased line-height per row
/// - `list`, top spacing
///     - `unitless number`, extra rows to add as whitespace
///     - `string`, method used (padding, margin or split)
///     - 'unit number', size of border
/// - `list`, bottom spacing
///     - `unitless number`, extra rows to add as whitespace
///     - `string`, method used (padding, margin or split)
///
/// @return {map}     Map of element settings
///
/// @throw
///   when a shorthand value is not recognized
@function _base-parse($shorthand, $map: $base){
    $return: ();
    $error: false;

	$settings: _base-settings($map);

	// error occured
	@if type-of($settings) == "string" {
		@return $settings;
	}

	@for $i from 1 through length($shorthand){
		$item: nth($shorthand, $i);
        $type: type-of($item);
		$details: '[#{$type}] `#{$item}`';

    	@if $type == number and unitless($item) {
            // add line height property
            $return: _base-map-add($return, "add-rows", $item);
        } @else if $type == number and _base-valid-unit($item, $settings) {
            // font-size property
            $return: _base-map-add($return, "font-size", $item);
        } @else if $type == list {
			$key: null;
            $nested-map: ();

            // loop trough the sub list
            @for $j from 1 through length($item){
                $nested-item: nth($item, $j);
                $nested-type: type-of($nested-item);

				@if $nested-type == number and unitless($nested-item) {
                    // Extra row to be added as whitespace
                    $nested-map: _base-map-add($nested-map, "rows", $nested-item);
                } @else if $nested-item == "top" or $nested-item == "bottom" {
                    // Direction of setting
                    $key: $nested-item;
                } @else if $nested-item == "margin" or $nested-item == "padding" or $nested-item == "split" {
                    // CSS property to use to calculate the whitespace
                    $nested-map: _base-map-add($nested-map, "type", $nested-item);
                } @else if $nested-type == number and _base-valid-unit($nested-item, $settings) {
                    // Border
                    $nested-map: _base-map-add($nested-map, "border", $nested-item);
                } @else{
                    $error: true;
                }
            }

			@if $key == null {
				@return _base-error("No direction set in sublist: #{$details}", "_base-parse");
			}

            $return: _base-map-add($return, $key, $nested-map);
        } @else{
            $error: true;
        }

		@if $error {
			@return _base-error("Unknown shorthand property: #{$details}", "_base-parse");
		}
    }

    @return $return;
}
