////
///	@group utilities
////

//* Base Error Output Override
/// Turn off error output for testing
$_base-error-output-override: false !default;

//* Base Error
/// Optionally return error messages without failing,
/// as a way to test error cases
///
/// @param {string} $message 	A useful error message, explaining the problem
/// @param {string} $source 	The original source of the error for debugging
/// @param {bool} $override [$_susy-error-output-override]
///   							Optionally return the error rather than failing
/// @return {string} 			Combined error with source and message
/// @throws 					When `$override == false`
@function _base-error($message, $source, $override: $_base-error-output-override) {
	@if $override {
		@return "ERROR [#{$source}] #{$message}";
 	}

	@error "[#{$source}] #{$message}";
}

//* Map add
/// Adds a key to the map, if not yet set
///
/// @param {map} 		$map		A map where the key-value pair should be added
/// @param {string} $key 		Key to be added to the map
/// @param {*} 			$value 	Value to be added to the map
///
/// @return {map} 	The updated map, with the new key-value pair
/// @throw 					when a duplicated key is tried to add
@function _base-map-add($map, $key, $value) {
	@if map-has-key($map, $key) {
		@return _base-error("Duplicate key: [#{type-of($key)}] `#{$key}`", "_base-map-add");
	}

	@return map-merge($map, ($key: $value));
}

/// Copy of [Map Extend](https://www.sitepoint.com/extra-map-functions-sass/)
/// @param {Map} $map - first map
/// @param {ArgList} $maps - other maps
/// @param {Bool} $deep - recursive mode
/// @return {Map}
@function _base-map-extend($map, $maps...) {
	$last: nth($maps, -1);
	$deep: $last == true;
	$max: if($deep, length($maps) - 1, length($maps));

	// Loop through all maps in $maps...
	@for $i from 1 through $max {
		// Store current map
		$current: nth($maps, $i);

		// If not in deep mode, simply merge current map with map
		@if not $deep {
			$map: map-merge($map, $current);
		} @else {
			// If in deep mode, loop through all tuples in current map
			@each $key, $value in $current {

				// If value is a nested map and same key from map is a nested map as well
				@if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
					// Recursive extend
					$value: _base-map-extend(map-get($map, $key), $value, true);
				}

				// Merge current tuple with map
				$map: map-merge($map, ($key: $value));
			}
		}
	}

	@return $map;
}

// simple to function to retrieve line-height with given full $config map
@function _base-get-line-height($config) {
	// return given line-height if set
	@if map-has-key($config, "line-height") {
		@return map-get($config, "line-height");
	}

	$add-rows-to-line-height: 	map-get($config, "add-rows-to-line-height");
	$font-size: 								map-get($config, "font-size");
	$min-line-height: 					map-get($config, "min-line-height");
	$root-font-size: 						map-get($config, "root-font-size");
	$row-height: 								map-get($config, "row-height");

	$rows: _base-math-rows(
		$font-size,
		$add-rows-to-line-height,
		$root-font-size,
		$row-height,
		$min-line-height
	);

	@return _base-math-line-height($rows, $font-size, $root-font-size, $row-height);
}